{"ast":null,"code":"import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n  var _a;\n  (_a = options.treeAdapter) !== null && _a !== void 0 ? _a : options.treeAdapter = htmlparser2Adapter;\n  if (options.scriptingEnabled !== false) {\n    options.scriptingEnabled = true;\n  }\n  return isDocument ? parseDocument(content, options) : parseFragment(context, content, options);\n}\nconst renderOpts = {\n  treeAdapter: htmlparser2Adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n  let result = '';\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n  return result;\n}","map":{"version":3,"names":["isDocument","parse","parseDocument","parseFragment","serializeOuter","adapter","htmlparser2Adapter","parseWithParse5","content","options","context","_a","treeAdapter","scriptingEnabled","renderOpts","renderWithParse5","dom","nodes","index","length","node","Array","prototype","splice","call","children","result"],"sources":["D:\\Map\\node_modules\\cheerio\\src\\parsers\\parse5-adapter.ts"],"sourcesContent":["import {\n  type AnyNode,\n  type Document,\n  type ParentNode,\n  isDocument,\n} from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\nimport type { InternalOptions } from '../options.js';\n\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(\n  content: string,\n  options: InternalOptions,\n  isDocument: boolean,\n  context: ParentNode | null,\n): Document {\n  options.treeAdapter ??= htmlparser2Adapter;\n\n  if (options.scriptingEnabled !== false) {\n    options.scriptingEnabled = true;\n  }\n\n  return isDocument\n    ? parseDocument(content, options)\n    : parseFragment(context, content, options);\n}\n\nconst renderOpts = { treeAdapter: htmlparser2Adapter };\n\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom: AnyNode | ArrayLike<AnyNode>): string {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n\n  let result = '';\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,SAIEA,UAAU,QACL,YAAY;AACnB,SAASC,KAAK,IAAIC,aAAa,EAAEC,aAAa,EAAEC,cAAc,QAAQ,QAAQ;AAC9E,SAASC,OAAO,IAAIC,kBAAkB,QAAQ,iCAAiC;AAG/E;;;;;;;;;AASA,OAAM,SAAUC,eAAeA,CAC7BC,OAAe,EACfC,OAAwB,EACxBT,UAAmB,EACnBU,OAA0B;;EAE1B,CAAAC,EAAA,GAAAF,OAAO,CAACG,WAAW,cAAAD,EAAA,cAAAA,EAAA,GAAnBF,OAAO,CAACG,WAAW,GAAKN,kBAAkB;EAE1C,IAAIG,OAAO,CAACI,gBAAgB,KAAK,KAAK,EAAE;IACtCJ,OAAO,CAACI,gBAAgB,GAAG,IAAI;EACjC;EAEA,OAAOb,UAAU,GACbE,aAAa,CAACM,OAAO,EAAEC,OAAO,CAAC,GAC/BN,aAAa,CAACO,OAAO,EAAEF,OAAO,EAAEC,OAAO,CAAC;AAC9C;AAEA,MAAMK,UAAU,GAAG;EAAEF,WAAW,EAAEN;AAAkB,CAAE;AAEtD;;;;;;AAMA,OAAM,SAAUS,gBAAgBA,CAACC,GAAiC;EAChE;;;;;EAKA,MAAMC,KAAK,GAAG,QAAQ,IAAID,GAAG,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;EAC3C,KAAK,IAAIE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACE,MAAM,EAAED,KAAK,IAAI,CAAC,EAAE;IACpD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAK,CAAC;IACzB,IAAIlB,UAAU,CAACoB,IAAI,CAAC,EAAE;MACpBC,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACP,KAAK,EAAEC,KAAK,EAAE,CAAC,EAAE,GAAGE,IAAI,CAACK,QAAQ,CAAC;IAChE;EACF;EAEA,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIR,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACE,MAAM,EAAED,KAAK,IAAI,CAAC,EAAE;IACpD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAK,CAAC;IACzBQ,MAAM,IAAItB,cAAc,CAACgB,IAAI,EAAEN,UAAU,CAAC;EAC5C;EAEA,OAAOY,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}