{"ast":null,"code":"import { getLoad } from './load.js';\nimport { getParse } from './parse.js';\nimport { renderWithParse5, parseWithParse5 } from './parsers/parse5-adapter.js';\nimport renderWithHtmlparser2 from 'dom-serializer';\nimport { parseDocument as parseWithHtmlparser2 } from 'htmlparser2';\nconst parse = getParse((content, options, isDocument, context) => options._useHtmlParser2 ? parseWithHtmlparser2(content, options) : parseWithParse5(content, options, isDocument, context));\n// Duplicate docs due to https://github.com/TypeStrong/typedoc/issues/1616\n/**\n * Create a querying function, bound to a document created from the provided\n * markup.\n *\n * Note that similar to web browser contexts, this operation may introduce\n * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n * switch to fragment mode and disable this.\n *\n * @category Loading\n * @param content - Markup to be loaded.\n * @param options - Options for the created instance.\n * @param isDocument - Allows parser to be switched to fragment mode.\n * @returns The loaded document.\n * @see {@link https://cheerio.js.org/docs/basics/loading#load} for additional usage information.\n */\nexport const load = getLoad(parse, (dom, options) => options._useHtmlParser2 ? renderWithHtmlparser2(dom, options) : renderWithParse5(dom));","map":{"version":3,"names":["getLoad","getParse","renderWithParse5","parseWithParse5","renderWithHtmlparser2","parseDocument","parseWithHtmlparser2","parse","content","options","isDocument","context","_useHtmlParser2","load","dom"],"sources":["D:\\Map\\node_modules\\cheerio\\src\\load-parse.ts"],"sourcesContent":["import { type CheerioAPI, getLoad } from './load.js';\nimport { getParse } from './parse.js';\nimport { renderWithParse5, parseWithParse5 } from './parsers/parse5-adapter.js';\nimport type { CheerioOptions } from './options.js';\nimport renderWithHtmlparser2 from 'dom-serializer';\nimport { parseDocument as parseWithHtmlparser2 } from 'htmlparser2';\nimport type { AnyNode } from 'domhandler';\n\nconst parse = getParse((content, options, isDocument, context) =>\n  options._useHtmlParser2\n    ? parseWithHtmlparser2(content, options)\n    : parseWithParse5(content, options, isDocument, context),\n);\n\n// Duplicate docs due to https://github.com/TypeStrong/typedoc/issues/1616\n/**\n * Create a querying function, bound to a document created from the provided\n * markup.\n *\n * Note that similar to web browser contexts, this operation may introduce\n * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n * switch to fragment mode and disable this.\n *\n * @category Loading\n * @param content - Markup to be loaded.\n * @param options - Options for the created instance.\n * @param isDocument - Allows parser to be switched to fragment mode.\n * @returns The loaded document.\n * @see {@link https://cheerio.js.org/docs/basics/loading#load} for additional usage information.\n */\nexport const load: (\n  content: string | AnyNode | AnyNode[] | Buffer,\n  options?: CheerioOptions | null,\n  isDocument?: boolean,\n) => CheerioAPI = getLoad(parse, (dom, options) =>\n  options._useHtmlParser2\n    ? renderWithHtmlparser2(dom, options)\n    : renderWithParse5(dom),\n);\n"],"mappings":"AAAA,SAA0BA,OAAO,QAAQ,WAAW;AACpD,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,6BAA6B;AAE/E,OAAOC,qBAAqB,MAAM,gBAAgB;AAClD,SAASC,aAAa,IAAIC,oBAAoB,QAAQ,aAAa;AAGnE,MAAMC,KAAK,GAAGN,QAAQ,CAAC,CAACO,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,OAAO,KAC3DF,OAAO,CAACG,eAAe,GACnBN,oBAAoB,CAACE,OAAO,EAAEC,OAAO,CAAC,GACtCN,eAAe,CAACK,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,OAAO,CAAC,CAC3D;AAED;AACA;;;;;;;;;;;;;;;AAeA,OAAO,MAAME,IAAI,GAICb,OAAO,CAACO,KAAK,EAAE,CAACO,GAAG,EAAEL,OAAO,KAC5CA,OAAO,CAACG,eAAe,GACnBR,qBAAqB,CAACU,GAAG,EAAEL,OAAO,CAAC,GACnCP,gBAAgB,CAACY,GAAG,CAAC,CAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}