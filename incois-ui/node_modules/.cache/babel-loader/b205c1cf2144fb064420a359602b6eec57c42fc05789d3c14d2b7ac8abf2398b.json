{"ast":null,"code":"import { Parser } from \"./Parser.js\";\nexport { Parser } from \"./Parser.js\";\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler,\n// Old name for DomHandler\nDomHandler as DefaultHandler } from \"domhandler\";\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM handler.\n */\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM handler.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed, with the resulting document.\n * @param options Optional options for the parser and DOM handler.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDocumentStream(callback, options, elementCallback) {\n  const handler = new DomHandler(error => callback(error, handler.root), options, elementCallback);\n  return new Parser(handler, options);\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed, with an array of root nodes.\n * @param options Optional options for the parser and DOM handler.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n * @deprecated Use `createDocumentStream` instead.\n */\nexport function createDomStream(callback, options, elementCallback) {\n  const handler = new DomHandler(callback, options, elementCallback);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer, QuoteType } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nimport * as _ElementType from \"domelementtype\";\nexport { _ElementType as ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed } from \"domutils\";\nconst parseFeedDefaultOptions = {\n  xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed, options = parseFeedDefaultOptions) {\n  return getFeed(parseDOM(feed, options));\n}\nimport * as _DomUtils from \"domutils\";\nexport { _DomUtils as DomUtils };","map":{"version":3,"names":["Parser","DomHandler","DefaultHandler","parseDocument","data","options","handler","undefined","end","root","parseDOM","children","createDocumentStream","callback","elementCallback","error","createDomStream","default","Tokenizer","QuoteType","_ElementType","ElementType","getFeed","parseFeedDefaultOptions","xmlMode","parseFeed","feed","_DomUtils","DomUtils"],"sources":["D:\\Map\\node_modules\\htmlparser2\\src\\index.ts"],"sourcesContent":["import { Parser, type ParserOptions } from \"./Parser.js\";\nexport type { Handler, ParserOptions } from \"./Parser.js\";\nexport { Parser } from \"./Parser.js\";\n\nimport {\n    DomHandler,\n    type DomHandlerOptions,\n    type ChildNode,\n    type Element,\n    type Document,\n} from \"domhandler\";\n\nexport {\n    DomHandler,\n    // Old name for DomHandler\n    DomHandler as DefaultHandler,\n    type DomHandlerOptions,\n} from \"domhandler\";\n\nexport type Options = ParserOptions & DomHandlerOptions;\n\n// Helper methods\n\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM handler.\n */\nexport function parseDocument(data: string, options?: Options): Document {\n    const handler = new DomHandler(undefined, options);\n    new Parser(handler, options).end(data);\n    return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM handler.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data: string, options?: Options): ChildNode[] {\n    return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed, with the resulting document.\n * @param options Optional options for the parser and DOM handler.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDocumentStream(\n    callback: (error: Error | null, document: Document) => void,\n    options?: Options,\n    elementCallback?: (element: Element) => void,\n): Parser {\n    const handler: DomHandler = new DomHandler(\n        (error: Error | null) => callback(error, handler.root),\n        options,\n        elementCallback,\n    );\n    return new Parser(handler, options);\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed, with an array of root nodes.\n * @param options Optional options for the parser and DOM handler.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n * @deprecated Use `createDocumentStream` instead.\n */\nexport function createDomStream(\n    callback: (error: Error | null, dom: ChildNode[]) => void,\n    options?: Options,\n    elementCallback?: (element: Element) => void,\n): Parser {\n    const handler = new DomHandler(callback, options, elementCallback);\n    return new Parser(handler, options);\n}\n\nexport {\n    default as Tokenizer,\n    type Callbacks as TokenizerCallbacks,\n    QuoteType,\n} from \"./Tokenizer.js\";\n\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nexport * as ElementType from \"domelementtype\";\n\nimport { getFeed, type Feed } from \"domutils\";\n\nexport { getFeed, type Feed } from \"domutils\";\n\nconst parseFeedDefaultOptions = { xmlMode: true };\n\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(\n    feed: string,\n    options: Options = parseFeedDefaultOptions,\n): Feed | null {\n    return getFeed(parseDOM(feed, options));\n}\n\nexport * as DomUtils from \"domutils\";\n"],"mappings":"AAAA,SAASA,MAAM,QAA4B,aAAa;AAExD,SAASA,MAAM,QAAQ,aAAa;AAEpC,SACIC,UAAU,QAKP,YAAY;AAEnB,SACIA,UAAU;AACV;AACAA,UAAU,IAAIC,cAAc,QAEzB,YAAY;AAInB;AAEA;;;;;;AAMA,OAAM,SAAUC,aAAaA,CAACC,IAAY,EAAEC,OAAiB;EACzD,MAAMC,OAAO,GAAG,IAAIL,UAAU,CAACM,SAAS,EAAEF,OAAO,CAAC;EAClD,IAAIL,MAAM,CAACM,OAAO,EAAED,OAAO,CAAC,CAACG,GAAG,CAACJ,IAAI,CAAC;EACtC,OAAOE,OAAO,CAACG,IAAI;AACvB;AACA;;;;;;;;;;AAUA,OAAM,SAAUC,QAAQA,CAACN,IAAY,EAAEC,OAAiB;EACpD,OAAOF,aAAa,CAACC,IAAI,EAAEC,OAAO,CAAC,CAACM,QAAQ;AAChD;AACA;;;;;;;AAOA,OAAM,SAAUC,oBAAoBA,CAChCC,QAA2D,EAC3DR,OAAiB,EACjBS,eAA4C;EAE5C,MAAMR,OAAO,GAAe,IAAIL,UAAU,CACrCc,KAAmB,IAAKF,QAAQ,CAACE,KAAK,EAAET,OAAO,CAACG,IAAI,CAAC,EACtDJ,OAAO,EACPS,eAAe,CAClB;EACD,OAAO,IAAId,MAAM,CAACM,OAAO,EAAED,OAAO,CAAC;AACvC;AACA;;;;;;;;AAQA,OAAM,SAAUW,eAAeA,CAC3BH,QAAyD,EACzDR,OAAiB,EACjBS,eAA4C;EAE5C,MAAMR,OAAO,GAAG,IAAIL,UAAU,CAACY,QAAQ,EAAER,OAAO,EAAES,eAAe,CAAC;EAClE,OAAO,IAAId,MAAM,CAACM,OAAO,EAAED,OAAO,CAAC;AACvC;AAEA,SACIY,OAAO,IAAIC,SAAS,EAEpBC,SAAS,QACN,gBAAgB;AAEvB;;;;AAAA,YAAAC,YAAA,MAI6B,gBAAgB;AAAA,SAAAA,YAAA,IAAjCC,WAAW;AAEvB,SAASC,OAAO,QAAmB,UAAU;AAE7C,SAASA,OAAO,QAAmB,UAAU;AAE7C,MAAMC,uBAAuB,GAAG;EAAEC,OAAO,EAAE;AAAI,CAAE;AAEjD;;;;;;AAMA,OAAM,SAAUC,SAASA,CACrBC,IAAY,EACZrB,OAAA,GAAmBkB,uBAAuB;EAE1C,OAAOD,OAAO,CAACZ,QAAQ,CAACgB,IAAI,EAAErB,OAAO,CAAC,CAAC;AAC3C;AAAC,YAAAsB,SAAA,MAEyB,UAAU;AAAA,SAAAA,SAAA,IAAxBC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}