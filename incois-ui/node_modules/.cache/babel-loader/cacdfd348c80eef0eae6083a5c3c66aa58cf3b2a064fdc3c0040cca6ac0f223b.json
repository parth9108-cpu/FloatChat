{"ast":null,"code":"const express = require(\"express\");\nconst axios = require(\"axios\");\nconst cheerio = require(\"cheerio\");\nconst NodeCache = require(\"node-cache\");\nconst cors = require(\"cors\");\nconst fs = require('fs');\nconst app = express();\napp.use(express.json());\napp.use(cors());\nconst cache = new NodeCache({\n  stdTTL: 600\n}); // cache for 10 min\n\n// Helper: cached fetch\nasync function cachedFetch(key, fetcher) {\n  const cached = cache.get(key);\n  if (cached) return cached;\n  const data = await fetcher();\n  cache.set(key, data);\n  return data;\n}\n\n// INCOIS data endpoints\nconst INCOIS_ENDPOINTS = {\n  OMNI_BUOYS: 'https://incois.gov.in/portal/datainfo/buoys.jsp',\n  ARGO_DATA: 'https://services.incois.gov.in/argo/ADV.jsp',\n  ERDDAP_BASE: 'https://erddap.incois.gov.in/erddap',\n  LIVE_ACCESS: 'https://las.incois.gov.in/las'\n};\n\n// Mock OMNI buoy locations (real coordinates from INCOIS documentation)\nconst OMNI_BUOY_LOCATIONS = [{\n  id: 'BD08',\n  name: 'Bay of Bengal North',\n  lat: 18.0,\n  lon: 89.6,\n  status: 'active'\n}, {\n  id: 'BD09',\n  name: 'Bay of Bengal Central',\n  lat: 15.0,\n  lon: 90.0,\n  status: 'active'\n}, {\n  id: 'BD10',\n  name: 'Bay of Bengal South',\n  lat: 12.0,\n  lon: 87.0,\n  status: 'active'\n}, {\n  id: 'BD11',\n  name: 'Bay of Bengal East',\n  lat: 17.5,\n  lon: 89.0,\n  status: 'active'\n}, {\n  id: 'AD06',\n  name: 'Arabian Sea North',\n  lat: 19.0,\n  lon: 67.0,\n  status: 'active'\n}, {\n  id: 'AD07',\n  name: 'Arabian Sea Central',\n  lat: 15.5,\n  lon: 68.0,\n  status: 'active'\n}, {\n  id: 'AD08',\n  name: 'Arabian Sea South',\n  lat: 12.0,\n  lon: 69.0,\n  status: 'active'\n}, {\n  id: 'OMNI-01',\n  name: 'OMNI Bay of Bengal-1',\n  lat: 13.5,\n  lon: 84.0,\n  status: 'active'\n}, {\n  id: 'OMNI-02',\n  name: 'OMNI Bay of Bengal-2',\n  lat: 16.5,\n  lon: 88.0,\n  status: 'active'\n}, {\n  id: 'OMNI-03',\n  name: 'OMNI Arabian Sea-1',\n  lat: 14.0,\n  lon: 69.5,\n  status: 'active'\n}, {\n  id: 'OMNI-04',\n  name: 'OMNI Arabian Sea-2',\n  lat: 17.0,\n  lon: 67.5,\n  status: 'active'\n}, {\n  id: 'OMNI-05',\n  name: 'OMNI Equatorial',\n  lat: 8.0,\n  lon: 77.0,\n  status: 'active'\n}];\n\n// RAMA buoy locations from INCOIS network\nconst RAMA_BUOY_LOCATIONS = [{\n  id: 'RAMA-8N67E',\n  name: 'RAMA 8°N 67°E',\n  lat: 8.0,\n  lon: 67.0,\n  status: 'active'\n}, {\n  id: 'RAMA-12N90E',\n  name: 'RAMA 12°N 90°E',\n  lat: 12.0,\n  lon: 90.0,\n  status: 'active'\n}, {\n  id: 'RAMA-15N90E',\n  name: 'RAMA 15°N 90°E',\n  lat: 15.0,\n  lon: 90.0,\n  status: 'active'\n}, {\n  id: 'RAMA-4N67E',\n  name: 'RAMA 4°N 67°E',\n  lat: 4.0,\n  lon: 67.0,\n  status: 'active'\n}, {\n  id: 'RAMA-0N80E',\n  name: 'RAMA 0°N 80°E',\n  lat: 0.0,\n  lon: 80.5,\n  status: 'active'\n}];\n\n// Generate realistic oceanographic data based on INCOIS parameters\nconst generateOceanographicData = (buoyId, lat, lon) => {\n  // Temperature varies by latitude and season\n  const baseTemp = lat < 10 ? 28 : lat < 20 ? 26 : 24;\n  const tempVariation = Math.random() * 4 - 2;\n\n  // Salinity typical for Indian Ocean\n  const baseSalinity = lat < 5 ? 34.5 : lat < 15 ? 35.0 : 34.8;\n  const salinityVariation = Math.random() * 0.5 - 0.25;\n  return {\n    id: buoyId,\n    name: buoyId,\n    lat: lat,\n    lon: lon,\n    status: Math.random() > 0.1 ? 'active' : 'inactive',\n    lastUpdate: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),\n    parameters: {\n      seaSurfaceTemperature: (baseTemp + tempVariation).toFixed(2),\n      salinity: (baseSalinity + salinityVariation).toFixed(2),\n      windSpeed: (5 + Math.random() * 15).toFixed(1),\n      windDirection: Math.floor(Math.random() * 360),\n      airTemperature: (baseTemp + tempVariation + 1).toFixed(2),\n      humidity: (70 + Math.random() * 25).toFixed(1),\n      pressure: (1010 + Math.random() * 20 - 10).toFixed(1),\n      waveHeight: (0.5 + Math.random() * 3).toFixed(2),\n      currentSpeed: (0.1 + Math.random() * 0.8).toFixed(2),\n      currentDirection: Math.floor(Math.random() * 360)\n    },\n    temperatureProfile: {\n      depths: [0, 5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500],\n      temperatures: generateTempProfile(baseTemp + tempVariation)\n    },\n    salinityProfile: {\n      depths: [0, 5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500],\n      salinity: generateSalinityProfile(baseSalinity + salinityVariation)\n    }\n  };\n};\nconst generateTempProfile = surfaceTemp => {\n  const profile = [surfaceTemp];\n  let currentTemp = surfaceTemp;\n\n  // Temperature decreases with depth following typical oceanic profile\n  const depthIntervals = [5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500];\n  for (let i = 0; i < depthIntervals.length; i++) {\n    const depth = depthIntervals[i];\n    if (depth <= 50) {\n      currentTemp -= Math.random() * 2; // Mixed layer\n    } else if (depth <= 200) {\n      currentTemp -= Math.random() * 5; // Thermocline\n    } else {\n      currentTemp -= Math.random() * 2; // Deep water\n    }\n    profile.push(Math.max(currentTemp, 4)); // Minimum deep water temp\n  }\n  return profile.map(t => parseFloat(t.toFixed(2)));\n};\nconst generateSalinityProfile = surfaceSalinity => {\n  const profile = [surfaceSalinity];\n  let currentSal = surfaceSalinity;\n  const depthIntervals = [5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500];\n  for (let i = 0; i < depthIntervals.length; i++) {\n    const depth = depthIntervals[i];\n    if (depth <= 100) {\n      currentSal += (Math.random() - 0.5) * 0.2; // Surface variation\n    } else {\n      currentSal += (Math.random() - 0.5) * 0.1; // Deep water stability\n    }\n    profile.push(Math.max(Math.min(currentSal, 36), 33)); // Realistic bounds\n  }\n  return profile.map(s => parseFloat(s.toFixed(2)));\n};\n\n/**\n * 1. Fetch all ocean observation network data (OMNI + RAMA buoys)\n */\napp.get(\"/api/ocean-buoys\", async (req, res) => {\n  try {\n    const allBuoys = await cachedFetch(\"ocean_buoys\", async () => {\n      const omniData = OMNI_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'OMNI',\n        network: 'Ocean Moored buoy Network for Northern Indian'\n      }));\n      const ramaData = RAMA_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'RAMA',\n        network: 'Research Moored Array for African-Asian-Australian Monsoon'\n      }));\n      return [...omniData, ...ramaData];\n    });\n\n    // Calculate statistics\n    const activeBuoys = allBuoys.filter(b => b.status === 'active').length;\n    const recentData = allBuoys.filter(b => {\n      const lastUpdate = new Date(b.lastUpdate);\n      const hoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);\n      return lastUpdate > hoursAgo;\n    }).length;\n    const avgTemp = allBuoys.reduce((sum, b) => {\n      return sum + parseFloat(b.parameters.seaSurfaceTemperature);\n    }, 0) / allBuoys.length;\n    const stats = {\n      totalBuoys: allBuoys.length,\n      activeBuoys: activeBuoys,\n      recentData: recentData,\n      avgTemperature: avgTemp.toFixed(1)\n    };\n    res.json({\n      success: true,\n      buoys: allBuoys,\n      stats: stats,\n      networks: {\n        OMNI: allBuoys.filter(b => b.type === 'OMNI').length,\n        RAMA: allBuoys.filter(b => b.type === 'RAMA').length\n      }\n    });\n  } catch (err) {\n    console.error(\"Error fetching ocean buoys:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: \"Failed to fetch ocean observation data\",\n      error: err.message\n    });\n  }\n});\n\n/**\n * 2. Fetch specific buoy details\n */\napp.get(\"/api/ocean-buoy/:id\", async (req, res) => {\n  const buoyId = req.params.id;\n  try {\n    const allBuoys = await cachedFetch(\"ocean_buoys\", async () => {\n      const omniData = OMNI_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'OMNI'\n      }));\n      const ramaData = RAMA_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'RAMA'\n      }));\n      return [...omniData, ...ramaData];\n    });\n    const buoy = allBuoys.find(b => b.id === buoyId);\n    if (!buoy) {\n      return res.status(404).json({\n        success: false,\n        message: \"Buoy not found\"\n      });\n    }\n    res.json({\n      success: true,\n      data: buoy\n    });\n  } catch (err) {\n    console.error(\"Error fetching buoy details:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: \"Failed to fetch buoy details\",\n      error: err.message\n    });\n  }\n});\n\n/**\n * 3. Generate CSV data for specific year\n */\napp.get(\"/api/ocean-data-csv/:year\", async (req, res) => {\n  const year = parseInt(req.params.year);\n  try {\n    const allBuoys = await cachedFetch(\"ocean_buoys\", async () => {\n      const omniData = OMNI_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'OMNI'\n      }));\n      const ramaData = RAMA_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'RAMA'\n      }));\n      return [...omniData, ...ramaData];\n    });\n\n    // Generate CSV content\n    let csvContent = \"Buoy_ID,Network,Latitude,Longitude,Status,Last_Update,SST,Salinity,Wind_Speed,Wind_Dir,Air_Temp,Humidity,Pressure,Wave_Height,Current_Speed,Current_Dir\\n\";\n    allBuoys.forEach(buoy => {\n      csvContent += [buoy.id, buoy.type, buoy.lat.toFixed(4), buoy.lon.toFixed(4), buoy.status, buoy.lastUpdate.split('T')[0], buoy.parameters.seaSurfaceTemperature, buoy.parameters.salinity, buoy.parameters.windSpeed, buoy.parameters.windDirection, buoy.parameters.airTemperature, buoy.parameters.humidity, buoy.parameters.pressure, buoy.parameters.waveHeight, buoy.parameters.currentSpeed, buoy.parameters.currentDirection].join(',') + '\\n';\n    });\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', `attachment; filename=\"incois_ocean_data_${year}.csv\"`);\n    res.send(csvContent);\n  } catch (err) {\n    console.error(\"Error generating CSV:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: \"Failed to generate CSV\",\n      error: err.message\n    });\n  }\n});\n\n/**\n * 4. Real-time data stream (simulated)\n */\napp.get(\"/api/realtime-data/:buoyId\", async (req, res) => {\n  const buoyId = req.params.buoyId;\n  try {\n    // Simulate real-time data with slight variations\n    const baseData = OMNI_BUOY_LOCATIONS.find(b => b.id === buoyId) || RAMA_BUOY_LOCATIONS.find(b => b.id === buoyId);\n    if (!baseData) {\n      return res.status(404).json({\n        success: false,\n        message: \"Buoy not found\"\n      });\n    }\n    const realtimeData = {\n      timestamp: new Date().toISOString(),\n      buoyId: buoyId,\n      data: generateOceanographicData(buoyId, baseData.lat, baseData.lon)\n    };\n    res.json({\n      success: true,\n      data: realtimeData\n    });\n  } catch (err) {\n    console.error(\"Error fetching real-time data:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: err.message\n    });\n  }\n});\n\n/**\n * 5. Historical data trends\n */\napp.get(\"/api/historical-trends/:buoyId/:days\", async (req, res) => {\n  const {\n    buoyId,\n    days\n  } = req.params;\n  const numDays = parseInt(days) || 7;\n  try {\n    const baseData = OMNI_BUOY_LOCATIONS.find(b => b.id === buoyId) || RAMA_BUOY_LOCATIONS.find(b => b.id === buoyId);\n    if (!baseData) {\n      return res.status(404).json({\n        success: false,\n        message: \"Buoy not found\"\n      });\n    }\n    const trends = [];\n    for (let i = numDays; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\n      const data = generateOceanographicData(buoyId, baseData.lat, baseData.lon);\n      trends.push({\n        date: date.toISOString().split('T')[0],\n        temperature: data.parameters.seaSurfaceTemperature,\n        salinity: data.parameters.salinity,\n        windSpeed: data.parameters.windSpeed,\n        waveHeight: data.parameters.waveHeight\n      });\n    }\n    res.json({\n      success: true,\n      trends: trends\n    });\n  } catch (err) {\n    console.error(\"Error fetching historical trends:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: err.message\n    });\n  }\n});\n\n// Legacy endpoints for compatibility\napp.get(\"/api/argo-floats\", (req, res) => {\n  res.redirect('/api/ocean-buoys');\n});\napp.get(\"/api/argo-float/:id\", (req, res) => {\n  res.redirect(`/api/ocean-buoy/${req.params.id}`);\n});\n\n// Root route\napp.get(\"/\", (req, res) => {\n  res.send(`\n    <h1>🌊 INCOIS Ocean Observation Network API</h1>\n    <h2>Available Endpoints:</h2>\n    <ul>\n      <li><a href=\"/api/ocean-buoys\">/api/ocean-buoys</a> - Get all OMNI & RAMA buoy data</li>\n      <li>/api/ocean-buoy/:id - Get specific buoy details</li>\n      <li>/api/ocean-data-csv/:year - Download CSV data</li>\n      <li>/api/realtime-data/:buoyId - Get real-time data</li>\n      <li>/api/historical-trends/:buoyId/:days - Get historical trends</li>\n    </ul>\n    <p>Data includes OMNI (${OMNI_BUOY_LOCATIONS.length}) and RAMA (${RAMA_BUOY_LOCATIONS.length}) buoy networks.</p>\n  `);\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`✅ INCOIS Ocean Observation Network API running on http://localhost:${PORT}`));","map":{"version":3,"names":["express","require","axios","cheerio","NodeCache","cors","fs","app","use","json","cache","stdTTL","cachedFetch","key","fetcher","cached","get","data","set","INCOIS_ENDPOINTS","OMNI_BUOYS","ARGO_DATA","ERDDAP_BASE","LIVE_ACCESS","OMNI_BUOY_LOCATIONS","id","name","lat","lon","status","RAMA_BUOY_LOCATIONS","generateOceanographicData","buoyId","baseTemp","tempVariation","Math","random","baseSalinity","salinityVariation","lastUpdate","Date","now","toISOString","parameters","seaSurfaceTemperature","toFixed","salinity","windSpeed","windDirection","floor","airTemperature","humidity","pressure","waveHeight","currentSpeed","currentDirection","temperatureProfile","depths","temperatures","generateTempProfile","salinityProfile","generateSalinityProfile","surfaceTemp","profile","currentTemp","depthIntervals","i","length","depth","push","max","map","t","parseFloat","surfaceSalinity","currentSal","min","s","req","res","allBuoys","omniData","buoy","type","network","ramaData","activeBuoys","filter","b","recentData","hoursAgo","avgTemp","reduce","sum","stats","totalBuoys","avgTemperature","success","buoys","networks","OMNI","RAMA","err","console","error","message","params","find","year","parseInt","csvContent","forEach","split","join","setHeader","send","baseData","realtimeData","timestamp","days","numDays","trends","date","temperature","redirect","PORT","process","env","listen","log"],"sources":["D:/Map/incois-ui/src/App.js"],"sourcesContent":["const express = require(\"express\");\nconst axios = require(\"axios\");\nconst cheerio = require(\"cheerio\");\nconst NodeCache = require(\"node-cache\");\nconst cors = require(\"cors\");\nconst fs = require('fs');\n\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\nconst cache = new NodeCache({ stdTTL: 600 }); // cache for 10 min\n\n// Helper: cached fetch\nasync function cachedFetch(key, fetcher) {\n  const cached = cache.get(key);\n  if (cached) return cached;\n  const data = await fetcher();\n  cache.set(key, data);\n  return data;\n}\n\n// INCOIS data endpoints\nconst INCOIS_ENDPOINTS = {\n  OMNI_BUOYS: 'https://incois.gov.in/portal/datainfo/buoys.jsp',\n  ARGO_DATA: 'https://services.incois.gov.in/argo/ADV.jsp',\n  ERDDAP_BASE: 'https://erddap.incois.gov.in/erddap',\n  LIVE_ACCESS: 'https://las.incois.gov.in/las'\n};\n\n// Mock OMNI buoy locations (real coordinates from INCOIS documentation)\nconst OMNI_BUOY_LOCATIONS = [\n  { id: 'BD08', name: 'Bay of Bengal North', lat: 18.0, lon: 89.6, status: 'active' },\n  { id: 'BD09', name: 'Bay of Bengal Central', lat: 15.0, lon: 90.0, status: 'active' },\n  { id: 'BD10', name: 'Bay of Bengal South', lat: 12.0, lon: 87.0, status: 'active' },\n  { id: 'BD11', name: 'Bay of Bengal East', lat: 17.5, lon: 89.0, status: 'active' },\n  { id: 'AD06', name: 'Arabian Sea North', lat: 19.0, lon: 67.0, status: 'active' },\n  { id: 'AD07', name: 'Arabian Sea Central', lat: 15.5, lon: 68.0, status: 'active' },\n  { id: 'AD08', name: 'Arabian Sea South', lat: 12.0, lon: 69.0, status: 'active' },\n  { id: 'OMNI-01', name: 'OMNI Bay of Bengal-1', lat: 13.5, lon: 84.0, status: 'active' },\n  { id: 'OMNI-02', name: 'OMNI Bay of Bengal-2', lat: 16.5, lon: 88.0, status: 'active' },\n  { id: 'OMNI-03', name: 'OMNI Arabian Sea-1', lat: 14.0, lon: 69.5, status: 'active' },\n  { id: 'OMNI-04', name: 'OMNI Arabian Sea-2', lat: 17.0, lon: 67.5, status: 'active' },\n  { id: 'OMNI-05', name: 'OMNI Equatorial', lat: 8.0, lon: 77.0, status: 'active' }\n];\n\n// RAMA buoy locations from INCOIS network\nconst RAMA_BUOY_LOCATIONS = [\n  { id: 'RAMA-8N67E', name: 'RAMA 8°N 67°E', lat: 8.0, lon: 67.0, status: 'active' },\n  { id: 'RAMA-12N90E', name: 'RAMA 12°N 90°E', lat: 12.0, lon: 90.0, status: 'active' },\n  { id: 'RAMA-15N90E', name: 'RAMA 15°N 90°E', lat: 15.0, lon: 90.0, status: 'active' },\n  { id: 'RAMA-4N67E', name: 'RAMA 4°N 67°E', lat: 4.0, lon: 67.0, status: 'active' },\n  { id: 'RAMA-0N80E', name: 'RAMA 0°N 80°E', lat: 0.0, lon: 80.5, status: 'active' }\n];\n\n// Generate realistic oceanographic data based on INCOIS parameters\nconst generateOceanographicData = (buoyId, lat, lon) => {\n  // Temperature varies by latitude and season\n  const baseTemp = lat < 10 ? 28 : lat < 20 ? 26 : 24;\n  const tempVariation = Math.random() * 4 - 2;\n  \n  // Salinity typical for Indian Ocean\n  const baseSalinity = lat < 5 ? 34.5 : lat < 15 ? 35.0 : 34.8;\n  const salinityVariation = Math.random() * 0.5 - 0.25;\n\n  return {\n    id: buoyId,\n    name: buoyId,\n    lat: lat,\n    lon: lon,\n    status: Math.random() > 0.1 ? 'active' : 'inactive',\n    lastUpdate: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),\n    parameters: {\n      seaSurfaceTemperature: (baseTemp + tempVariation).toFixed(2),\n      salinity: (baseSalinity + salinityVariation).toFixed(2),\n      windSpeed: (5 + Math.random() * 15).toFixed(1),\n      windDirection: Math.floor(Math.random() * 360),\n      airTemperature: (baseTemp + tempVariation + 1).toFixed(2),\n      humidity: (70 + Math.random() * 25).toFixed(1),\n      pressure: (1010 + Math.random() * 20 - 10).toFixed(1),\n      waveHeight: (0.5 + Math.random() * 3).toFixed(2),\n      currentSpeed: (0.1 + Math.random() * 0.8).toFixed(2),\n      currentDirection: Math.floor(Math.random() * 360)\n    },\n    temperatureProfile: {\n      depths: [0, 5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500],\n      temperatures: generateTempProfile(baseTemp + tempVariation)\n    },\n    salinityProfile: {\n      depths: [0, 5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500],\n      salinity: generateSalinityProfile(baseSalinity + salinityVariation)\n    }\n  };\n};\n\nconst generateTempProfile = (surfaceTemp) => {\n  const profile = [surfaceTemp];\n  let currentTemp = surfaceTemp;\n  \n  // Temperature decreases with depth following typical oceanic profile\n  const depthIntervals = [5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500];\n  \n  for (let i = 0; i < depthIntervals.length; i++) {\n    const depth = depthIntervals[i];\n    if (depth <= 50) {\n      currentTemp -= Math.random() * 2; // Mixed layer\n    } else if (depth <= 200) {\n      currentTemp -= Math.random() * 5; // Thermocline\n    } else {\n      currentTemp -= Math.random() * 2; // Deep water\n    }\n    profile.push(Math.max(currentTemp, 4)); // Minimum deep water temp\n  }\n  \n  return profile.map(t => parseFloat(t.toFixed(2)));\n};\n\nconst generateSalinityProfile = (surfaceSalinity) => {\n  const profile = [surfaceSalinity];\n  let currentSal = surfaceSalinity;\n  \n  const depthIntervals = [5, 10, 20, 30, 50, 75, 100, 125, 150, 200, 300, 500];\n  \n  for (let i = 0; i < depthIntervals.length; i++) {\n    const depth = depthIntervals[i];\n    if (depth <= 100) {\n      currentSal += (Math.random() - 0.5) * 0.2; // Surface variation\n    } else {\n      currentSal += (Math.random() - 0.5) * 0.1; // Deep water stability\n    }\n    profile.push(Math.max(Math.min(currentSal, 36), 33)); // Realistic bounds\n  }\n  \n  return profile.map(s => parseFloat(s.toFixed(2)));\n};\n\n/**\n * 1. Fetch all ocean observation network data (OMNI + RAMA buoys)\n */\napp.get(\"/api/ocean-buoys\", async (req, res) => {\n  try {\n    const allBuoys = await cachedFetch(\"ocean_buoys\", async () => {\n      const omniData = OMNI_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'OMNI',\n        network: 'Ocean Moored buoy Network for Northern Indian'\n      }));\n\n      const ramaData = RAMA_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'RAMA',\n        network: 'Research Moored Array for African-Asian-Australian Monsoon'\n      }));\n\n      return [...omniData, ...ramaData];\n    });\n\n    // Calculate statistics\n    const activeBuoys = allBuoys.filter(b => b.status === 'active').length;\n    const recentData = allBuoys.filter(b => {\n      const lastUpdate = new Date(b.lastUpdate);\n      const hoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);\n      return lastUpdate > hoursAgo;\n    }).length;\n\n    const avgTemp = allBuoys.reduce((sum, b) => {\n      return sum + parseFloat(b.parameters.seaSurfaceTemperature);\n    }, 0) / allBuoys.length;\n\n    const stats = {\n      totalBuoys: allBuoys.length,\n      activeBuoys: activeBuoys,\n      recentData: recentData,\n      avgTemperature: avgTemp.toFixed(1)\n    };\n\n    res.json({\n      success: true,\n      buoys: allBuoys,\n      stats: stats,\n      networks: {\n        OMNI: allBuoys.filter(b => b.type === 'OMNI').length,\n        RAMA: allBuoys.filter(b => b.type === 'RAMA').length\n      }\n    });\n  } catch (err) {\n    console.error(\"Error fetching ocean buoys:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: \"Failed to fetch ocean observation data\",\n      error: err.message,\n    });\n  }\n});\n\n/**\n * 2. Fetch specific buoy details\n */\napp.get(\"/api/ocean-buoy/:id\", async (req, res) => {\n  const buoyId = req.params.id;\n  try {\n    const allBuoys = await cachedFetch(\"ocean_buoys\", async () => {\n      const omniData = OMNI_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'OMNI'\n      }));\n      const ramaData = RAMA_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'RAMA'\n      }));\n      return [...omniData, ...ramaData];\n    });\n\n    const buoy = allBuoys.find(b => b.id === buoyId);\n    \n    if (!buoy) {\n      return res.status(404).json({\n        success: false,\n        message: \"Buoy not found\"\n      });\n    }\n\n    res.json({ \n      success: true, \n      data: buoy \n    });\n  } catch (err) {\n    console.error(\"Error fetching buoy details:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: \"Failed to fetch buoy details\",\n      error: err.message,\n    });\n  }\n});\n\n/**\n * 3. Generate CSV data for specific year\n */\napp.get(\"/api/ocean-data-csv/:year\", async (req, res) => {\n  const year = parseInt(req.params.year);\n  try {\n    const allBuoys = await cachedFetch(\"ocean_buoys\", async () => {\n      const omniData = OMNI_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'OMNI'\n      }));\n      const ramaData = RAMA_BUOY_LOCATIONS.map(buoy => ({\n        ...generateOceanographicData(buoy.id, buoy.lat, buoy.lon),\n        type: 'RAMA'\n      }));\n      return [...omniData, ...ramaData];\n    });\n\n    // Generate CSV content\n    let csvContent = \"Buoy_ID,Network,Latitude,Longitude,Status,Last_Update,SST,Salinity,Wind_Speed,Wind_Dir,Air_Temp,Humidity,Pressure,Wave_Height,Current_Speed,Current_Dir\\n\";\n    \n    allBuoys.forEach(buoy => {\n      csvContent += [\n        buoy.id,\n        buoy.type,\n        buoy.lat.toFixed(4),\n        buoy.lon.toFixed(4),\n        buoy.status,\n        buoy.lastUpdate.split('T')[0],\n        buoy.parameters.seaSurfaceTemperature,\n        buoy.parameters.salinity,\n        buoy.parameters.windSpeed,\n        buoy.parameters.windDirection,\n        buoy.parameters.airTemperature,\n        buoy.parameters.humidity,\n        buoy.parameters.pressure,\n        buoy.parameters.waveHeight,\n        buoy.parameters.currentSpeed,\n        buoy.parameters.currentDirection\n      ].join(',') + '\\n';\n    });\n\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', `attachment; filename=\"incois_ocean_data_${year}.csv\"`);\n    res.send(csvContent);\n    \n  } catch (err) {\n    console.error(\"Error generating CSV:\", err.message);\n    res.status(500).json({\n      success: false,\n      message: \"Failed to generate CSV\",\n      error: err.message,\n    });\n  }\n});\n\n/**\n * 4. Real-time data stream (simulated)\n */\napp.get(\"/api/realtime-data/:buoyId\", async (req, res) => {\n  const buoyId = req.params.buoyId;\n  try {\n    // Simulate real-time data with slight variations\n    const baseData = OMNI_BUOY_LOCATIONS.find(b => b.id === buoyId) || \n                     RAMA_BUOY_LOCATIONS.find(b => b.id === buoyId);\n    \n    if (!baseData) {\n      return res.status(404).json({ success: false, message: \"Buoy not found\" });\n    }\n\n    const realtimeData = {\n      timestamp: new Date().toISOString(),\n      buoyId: buoyId,\n      data: generateOceanographicData(buoyId, baseData.lat, baseData.lon)\n    };\n\n    res.json({ success: true, data: realtimeData });\n  } catch (err) {\n    console.error(\"Error fetching real-time data:\", err.message);\n    res.status(500).json({ success: false, message: err.message });\n  }\n});\n\n/**\n * 5. Historical data trends\n */\napp.get(\"/api/historical-trends/:buoyId/:days\", async (req, res) => {\n  const { buoyId, days } = req.params;\n  const numDays = parseInt(days) || 7;\n  \n  try {\n    const baseData = OMNI_BUOY_LOCATIONS.find(b => b.id === buoyId) || \n                     RAMA_BUOY_LOCATIONS.find(b => b.id === buoyId);\n    \n    if (!baseData) {\n      return res.status(404).json({ success: false, message: \"Buoy not found\" });\n    }\n\n    const trends = [];\n    for (let i = numDays; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\n      const data = generateOceanographicData(buoyId, baseData.lat, baseData.lon);\n      trends.push({\n        date: date.toISOString().split('T')[0],\n        temperature: data.parameters.seaSurfaceTemperature,\n        salinity: data.parameters.salinity,\n        windSpeed: data.parameters.windSpeed,\n        waveHeight: data.parameters.waveHeight\n      });\n    }\n\n    res.json({ success: true, trends: trends });\n  } catch (err) {\n    console.error(\"Error fetching historical trends:\", err.message);\n    res.status(500).json({ success: false, message: err.message });\n  }\n});\n\n// Legacy endpoints for compatibility\napp.get(\"/api/argo-floats\", (req, res) => {\n  res.redirect('/api/ocean-buoys');\n});\n\napp.get(\"/api/argo-float/:id\", (req, res) => {\n  res.redirect(`/api/ocean-buoy/${req.params.id}`);\n});\n\n// Root route\napp.get(\"/\", (req, res) => {\n  res.send(`\n    <h1>🌊 INCOIS Ocean Observation Network API</h1>\n    <h2>Available Endpoints:</h2>\n    <ul>\n      <li><a href=\"/api/ocean-buoys\">/api/ocean-buoys</a> - Get all OMNI & RAMA buoy data</li>\n      <li>/api/ocean-buoy/:id - Get specific buoy details</li>\n      <li>/api/ocean-data-csv/:year - Download CSV data</li>\n      <li>/api/realtime-data/:buoyId - Get real-time data</li>\n      <li>/api/historical-trends/:buoyId/:days - Get historical trends</li>\n    </ul>\n    <p>Data includes OMNI (${OMNI_BUOY_LOCATIONS.length}) and RAMA (${RAMA_BUOY_LOCATIONS.length}) buoy networks.</p>\n  `);\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () =>\n  console.log(`✅ INCOIS Ocean Observation Network API running on http://localhost:${PORT}`)\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}