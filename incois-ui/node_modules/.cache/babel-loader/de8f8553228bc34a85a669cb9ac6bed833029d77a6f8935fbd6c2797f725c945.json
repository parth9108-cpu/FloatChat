{"ast":null,"code":"/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\nvar _a;\nimport { text } from '../static.js';\nimport { domEach, camelCase, cssCase } from '../utils.js';\nimport { isTag } from 'domhandler';\nimport { innerText, textContent } from 'domutils';\nimport { ElementType } from 'htmlparser2';\nconst hasOwn =\n// @ts-expect-error `hasOwn` is a standard object method\n(_a = Object.hasOwn) !== null && _a !== void 0 ? _a : (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nconst rspace = /\\s+/;\nconst dataAttrPrefix = 'data-';\n// Attributes that are booleans\nconst rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nconst rbrace = /^{[^]*}$|^\\[[^]*]$/;\nfunction getAttr(elem, name, xmlMode) {\n  var _a;\n  if (!elem || !isTag(elem)) return undefined;\n  (_a = elem.attribs) !== null && _a !== void 0 ? _a : elem.attribs = {};\n  // Return the entire attribs object if no attribute specified\n  if (!name) {\n    return elem.attribs;\n  }\n  if (hasOwn(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];\n  }\n  // Mimic the DOM and return text content as value for `option's`\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  }\n  // Mimic DOM with default value for radios/checkboxes\n  if (elem.name === 'input' && (elem.attribs['type'] === 'radio' || elem.attribs['type'] === 'checkbox') && name === 'value') {\n    return 'on';\n  }\n  return undefined;\n}\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is\n * `null`.\n *\n * @private\n * @param el - The element to set the attribute on.\n * @param name - The attribute's name.\n * @param value - The attribute's value.\n */\nfunction setAttr(el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = `${value}`;\n  }\n}\nexport function attr(name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      if (typeof name !== 'string') {\n        {\n          throw new Error('Bad combination of arguments.');\n        }\n      }\n      return domEach(this, (el, i) => {\n        if (isTag(el)) setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n    return domEach(this, el => {\n      if (!isTag(el)) return;\n      if (typeof name === 'object') {\n        for (const objName of Object.keys(name)) {\n          const objValue = name[objName];\n          setAttr(el, objName, objValue);\n        }\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n  return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);\n}\n/**\n * Gets a node's prop.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the prop of.\n * @param name - Name of the prop.\n * @param xmlMode - Disable handling of special HTML attributes.\n * @returns The prop's value.\n */\nfunction getProp(el, name, xmlMode) {\n  return name in el ?\n  // @ts-expect-error TS doesn't like us accessing the value directly here.\n  el[name] : !xmlMode && rboolean.test(name) ? getAttr(el, name, false) !== undefined : getAttr(el, name, xmlMode);\n}\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param el - The element to set the prop on.\n * @param name - The prop's name.\n * @param value - The prop's value.\n * @param xmlMode - Disable handling of special HTML attributes.\n */\nfunction setProp(el, name, value, xmlMode) {\n  if (name in el) {\n    // @ts-expect-error Overriding value\n    el[name] = value;\n  } else {\n    setAttr(el, name, !xmlMode && rboolean.test(name) ? value ? '' : null : `${value}`);\n  }\n}\nexport function prop(name, value) {\n  var _a;\n  if (typeof name === 'string' && value === undefined) {\n    const el = this[0];\n    if (!el) return undefined;\n    switch (name) {\n      case 'style':\n        {\n          const property = this.css();\n          const keys = Object.keys(property);\n          for (let i = 0; i < keys.length; i++) {\n            property[i] = keys[i];\n          }\n          property.length = keys.length;\n          return property;\n        }\n      case 'tagName':\n      case 'nodeName':\n        {\n          if (!isTag(el)) return undefined;\n          return el.name.toUpperCase();\n        }\n      case 'href':\n      case 'src':\n        {\n          if (!isTag(el)) return undefined;\n          const prop = (_a = el.attribs) === null || _a === void 0 ? void 0 : _a[name];\n          if (typeof URL !== 'undefined' && (name === 'href' && (el.tagName === 'a' || el.tagName === 'link') || name === 'src' && (el.tagName === 'img' || el.tagName === 'iframe' || el.tagName === 'audio' || el.tagName === 'video' || el.tagName === 'source')) && prop !== undefined && this.options.baseURI) {\n            return new URL(prop, this.options.baseURI).href;\n          }\n          return prop;\n        }\n      case 'innerText':\n        {\n          return innerText(el);\n        }\n      case 'textContent':\n        {\n          return textContent(el);\n        }\n      case 'outerHTML':\n        {\n          if (el.type === ElementType.Root) return this.html();\n          return this.clone().wrap('<container />').parent().html();\n        }\n      case 'innerHTML':\n        {\n          return this.html();\n        }\n      default:\n        {\n          if (!isTag(el)) return undefined;\n          return getProp(el, name, this.options.xmlMode);\n        }\n    }\n  }\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      if (typeof name === 'object') {\n        throw new TypeError('Bad combination of arguments.');\n      }\n      return domEach(this, (el, i) => {\n        if (isTag(el)) {\n          setProp(el, name, value.call(el, i, getProp(el, name, this.options.xmlMode)), this.options.xmlMode);\n        }\n      });\n    }\n    return domEach(this, el => {\n      if (!isTag(el)) return;\n      if (typeof name === 'object') {\n        for (const key of Object.keys(name)) {\n          const val = name[key];\n          setProp(el, key, val, this.options.xmlMode);\n        }\n      } else {\n        setProp(el, name, value, this.options.xmlMode);\n      }\n    });\n  }\n  return undefined;\n}\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param elem - The element to set the data attribute on.\n * @param name - The data attribute's name.\n * @param value - The data attribute's value.\n */\nfunction setData(elem, name, value) {\n  var _a;\n  (_a = elem.data) !== null && _a !== void 0 ? _a : elem.data = {};\n  if (typeof name === 'object') Object.assign(elem.data, name);else if (typeof name === 'string' && value !== undefined) {\n    elem.data[name] = value;\n  }\n}\n/**\n * Read _all_ HTML5 `data-*` attributes from the equivalent HTML5 `data-*`\n * attribute, and cache the value in the node's internal data store.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the data attribute of.\n * @returns A map with all of the data attributes.\n */\nfunction readAllData(el) {\n  for (const domName of Object.keys(el.attribs)) {\n    if (!domName.startsWith(dataAttrPrefix)) {\n      continue;\n    }\n    const jsName = camelCase(domName.slice(dataAttrPrefix.length));\n    if (!hasOwn(el.data, jsName)) {\n      el.data[jsName] = parseDataValue(el.attribs[domName]);\n    }\n  }\n  return el.data;\n}\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the data attribute of.\n * @param name - Name of the data attribute.\n * @returns The data attribute's value.\n */\nfunction readData(el, name) {\n  const domName = dataAttrPrefix + cssCase(name);\n  const data = el.data;\n  if (hasOwn(data, name)) {\n    return data[name];\n  }\n  if (hasOwn(el.attribs, domName)) {\n    return data[name] = parseDataValue(el.attribs[domName]);\n  }\n  return undefined;\n}\n/**\n * Coerce string data-* attributes to their corresponding JavaScript primitives.\n *\n * @private\n * @category Attributes\n * @param value - The value to parse.\n * @returns The parsed value.\n */\nfunction parseDataValue(value) {\n  if (value === 'null') return null;\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  const num = Number(value);\n  if (value === String(num)) return num;\n  if (rbrace.test(value)) {\n    try {\n      return JSON.parse(value);\n    } catch {\n      /* Ignore */\n    }\n  }\n  return value;\n}\nexport function data(name, value) {\n  var _a;\n  const elem = this[0];\n  if (!elem || !isTag(elem)) return;\n  const dataEl = elem;\n  (_a = dataEl.data) !== null && _a !== void 0 ? _a : dataEl.data = {};\n  // Return the entire data object if no data specified\n  if (name == null) {\n    return readAllData(dataEl);\n  }\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, el => {\n      if (isTag(el)) {\n        if (typeof name === 'object') setData(el, name);else setData(el, name, value);\n      }\n    });\n    return this;\n  }\n  return readData(dataEl, name);\n}\nexport function val(value) {\n  const querying = arguments.length === 0;\n  const element = this[0];\n  if (!element || !isTag(element)) return querying ? undefined : this;\n  switch (element.name) {\n    case 'textarea':\n      {\n        return this.text(value);\n      }\n    case 'select':\n      {\n        const option = this.find('option:selected');\n        if (!querying) {\n          if (this.attr('multiple') == null && typeof value === 'object') {\n            return this;\n          }\n          this.find('option').removeAttr('selected');\n          const values = typeof value === 'object' ? value : [value];\n          for (const val of values) {\n            this.find(`option[value=\"${val}\"]`).attr('selected', '');\n          }\n          return this;\n        }\n        return this.attr('multiple') ? option.toArray().map(el => text(el.children)) : option.attr('value');\n      }\n    case 'input':\n    case 'option':\n      {\n        return querying ? this.attr('value') : this.attr('value', value);\n      }\n  }\n  return undefined;\n}\n/**\n * Remove an attribute.\n *\n * @private\n * @param elem - Node to remove attribute from.\n * @param name - Name of the attribute to remove.\n */\nfunction removeAttribute(elem, name) {\n  if (!elem.attribs || !hasOwn(elem.attribs, name)) return;\n  delete elem.attribs[name];\n}\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @category Attributes\n * @param names - Names to split.\n * @returns - Split names.\n */\nfunction splitNames(names) {\n  return names ? names.trim().split(rspace) : [];\n}\n/**\n * Method for removing attributes by `name`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeAttr('class').prop('outerHTML');\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite');\n * $('.apple').removeAttr('id class').prop('outerHTML');\n * //=> <li>Apple</li>\n * ```\n *\n * @param name - Name of the attribute.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\nexport function removeAttr(name) {\n  const attrNames = splitNames(name);\n  for (const attrName of attrNames) {\n    domEach(this, elem => {\n      if (isTag(elem)) removeAttribute(elem, attrName);\n    });\n  }\n  return this;\n}\n/**\n * Check to see if _any_ of the matched elements have the given `className`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').hasClass('pear');\n * //=> true\n *\n * $('apple').hasClass('fruit');\n * //=> false\n *\n * $('li').hasClass('pear');\n * //=> true\n * ```\n *\n * @param className - Name of the class.\n * @returns Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\nexport function hasClass(className) {\n  return this.toArray().some(elem => {\n    const clazz = isTag(elem) && elem.attribs['class'];\n    let idx = -1;\n    if (clazz && className.length > 0) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        const end = idx + className.length;\n        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {\n          return true;\n        }\n      }\n    }\n    return false;\n  });\n}\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').addClass('fruit').prop('outerHTML');\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').prop('outerHTML');\n * //=> <li class=\"apple fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of new class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\nexport function addClass(value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        const className = el.attribs['class'] || '';\n        addClass.call([el], value.call(el, i, className));\n      }\n    });\n  }\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n  const classNames = value.split(rspace);\n  const numElements = this.length;\n  for (let i = 0; i < numElements; i++) {\n    const el = this[i];\n    // If selected element isn't a tag, move on\n    if (!isTag(el)) continue;\n    // If we don't already have classes — always set xmlMode to false here, as it doesn't matter for classes\n    const className = getAttr(el, 'class', false);\n    if (className) {\n      let setClass = ` ${className} `;\n      // Check if class already exists\n      for (const cn of classNames) {\n        const appendClass = `${cn} `;\n        if (!setClass.includes(` ${appendClass}`)) setClass += appendClass;\n      }\n      setAttr(el, 'class', setClass.trim());\n    } else {\n      setAttr(el, 'class', classNames.join(' ').trim());\n    }\n  }\n  return this;\n}\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a\n * `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeClass('pear').prop('outerHTML');\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().prop('outerHTML');\n * //=> <li class=\"\">Apple</li>\n * ```\n *\n * @param name - Name of the class. If not specified, removes all elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\nexport function removeClass(name) {\n  // Handle if value is a function\n  if (typeof name === 'function') {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        removeClass.call([el], name.call(el, i, el.attribs['class'] || ''));\n      }\n    });\n  }\n  const classes = splitNames(name);\n  const numClasses = classes.length;\n  const removeAll = arguments.length === 0;\n  return domEach(this, el => {\n    if (!isTag(el)) return;\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs['class'] = '';\n    } else {\n      const elClasses = splitNames(el.attribs['class']);\n      let changed = false;\n      for (let j = 0; j < numClasses; j++) {\n        const index = elClasses.indexOf(classes[j]);\n        if (index !== -1) {\n          elClasses.splice(index, 1);\n          changed = true;\n          /*\n           * We have to do another pass to ensure that there are not duplicate\n           * classes listed\n           */\n          j--;\n        }\n      }\n      if (changed) {\n        el.attribs['class'] = elClasses.join(' ');\n      }\n    }\n  });\n}\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple.green').toggleClass('fruit green red').prop('outerHTML');\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).prop('outerHTML');\n * //=> <li class=\"apple green fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of the class. Can also be a function.\n * @param stateVal - If specified the state of the class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\nexport function toggleClass(value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        toggleClass.call([el], value.call(el, i, el.attribs['class'] || '', stateVal), stateVal);\n      }\n    });\n  }\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n  const classNames = value.split(rspace);\n  const numClasses = classNames.length;\n  const state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0;\n  const numElements = this.length;\n  for (let i = 0; i < numElements; i++) {\n    const el = this[i];\n    // If selected element isn't a tag, move on\n    if (!isTag(el)) continue;\n    const elementClasses = splitNames(el.attribs['class']);\n    // Check if class already exists\n    for (let j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      const index = elementClasses.indexOf(classNames[j]);\n      // Add if stateValue === true or we are toggling and there is no value\n      if (state >= 0 && index === -1) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index !== -1) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n    el.attribs['class'] = elementClasses.join(' ');\n  }\n  return this;\n}","map":{"version":3,"names":["text","domEach","camelCase","cssCase","isTag","innerText","textContent","ElementType","hasOwn","_a","Object","object","prop","prototype","hasOwnProperty","call","rspace","dataAttrPrefix","rboolean","rbrace","getAttr","elem","name","xmlMode","undefined","attribs","test","children","setAttr","el","value","removeAttribute","attr","Error","i","objName","keys","objValue","arguments","length","options","getProp","setProp","property","css","toUpperCase","URL","tagName","baseURI","href","type","Root","html","clone","wrap","parent","TypeError","key","val","setData","data","assign","readAllData","domName","startsWith","jsName","slice","parseDataValue","readData","num","Number","String","JSON","parse","dataEl","querying","element","option","find","removeAttr","values","toArray","map","splitNames","names","trim","split","attrNames","attrName","hasClass","className","some","clazz","idx","indexOf","end","addClass","classNames","numElements","setClass","cn","appendClass","includes","join","removeClass","classes","numClasses","removeAll","elClasses","changed","j","index","splice","toggleClass","stateVal","state","elementClasses","push"],"sources":["D:\\Map\\node_modules\\cheerio\\src\\api\\attributes.ts"],"sourcesContent":["/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nimport { text } from '../static.js';\nimport { domEach, camelCase, cssCase } from '../utils.js';\nimport { isTag, type AnyNode, type Element } from 'domhandler';\nimport type { Cheerio } from '../cheerio.js';\nimport { innerText, textContent } from 'domutils';\nimport { ElementType } from 'htmlparser2';\nconst hasOwn =\n  // @ts-expect-error `hasOwn` is a standard object method\n  (Object.hasOwn as (object: unknown, prop: string) => boolean) ??\n  ((object: unknown, prop: string) =>\n    Object.prototype.hasOwnProperty.call(object, prop));\nconst rspace = /\\s+/;\nconst dataAttrPrefix = 'data-';\n\n// Attributes that are booleans\nconst rboolean =\n  /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nconst rbrace = /^{[^]*}$|^\\[[^]*]$/;\n\n/**\n * Gets a node's attribute. For boolean attributes, it will return the value's\n * name should it be set.\n *\n * Also supports getting the `value` of several form elements.\n *\n * @private\n * @category Attributes\n * @param elem - Element to get the attribute of.\n * @param name - Name of the attribute.\n * @param xmlMode - Disable handling of special HTML attributes.\n * @returns The attribute's value.\n */\nfunction getAttr(\n  elem: AnyNode,\n  name: undefined,\n  xmlMode?: boolean,\n): Record<string, string> | undefined;\nfunction getAttr(\n  elem: AnyNode,\n  name: string,\n  xmlMode?: boolean,\n): string | undefined;\nfunction getAttr(\n  elem: AnyNode,\n  name: string | undefined,\n  xmlMode?: boolean,\n): Record<string, string> | string | undefined {\n  if (!elem || !isTag(elem)) return undefined;\n\n  elem.attribs ??= {};\n\n  // Return the entire attribs object if no attribute specified\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];\n  }\n\n  // Mimic the DOM and return text content as value for `option's`\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  }\n\n  // Mimic DOM with default value for radios/checkboxes\n  if (\n    elem.name === 'input' &&\n    (elem.attribs['type'] === 'radio' || elem.attribs['type'] === 'checkbox') &&\n    name === 'value'\n  ) {\n    return 'on';\n  }\n\n  return undefined;\n}\n\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is\n * `null`.\n *\n * @private\n * @param el - The element to set the attribute on.\n * @param name - The attribute's name.\n * @param value - The attribute's value.\n */\nfunction setAttr(el: Element, name: string, value: string | null) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = `${value}`;\n  }\n}\n\n/**\n * Method for getting attributes. Gets the attribute value for only the first\n * element in the matched set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('ul').attr('id');\n * //=> fruits\n * ```\n *\n * @param name - Name of the attribute.\n * @returns The attribute's value.\n * @see {@link https://api.jquery.com/attr/}\n */\nexport function attr<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string,\n): string | undefined;\n/**\n * Method for getting all attributes and their values of the first element in\n * the matched set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('ul').attr();\n * //=> { id: 'fruits' }\n * ```\n *\n * @returns The attribute's values.\n * @see {@link https://api.jquery.com/attr/}\n */\nexport function attr<T extends AnyNode>(\n  this: Cheerio<T>,\n): Record<string, string> | undefined;\n/**\n * Method for setting attributes. Sets the attribute value for all elements in\n * the matched set. If you set an attribute's value to `null`, you remove that\n * attribute. You may also pass a `map` and `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple').attr('id', 'favorite').prop('outerHTML');\n * //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n * ```\n *\n * @param name - Name of the attribute.\n * @param value - The new value of the attribute.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/attr/}\n */\nexport function attr<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string,\n  value?:\n    | string\n    | null\n    | ((this: Element, i: number, attrib: string) => string | null),\n): Cheerio<T>;\n/**\n * Method for setting multiple attributes at once. Sets the attribute value for\n * all elements in the matched set. If you set an attribute's value to `null`,\n * you remove that attribute.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple').attr({ id: 'favorite' }).prop('outerHTML');\n * //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n * ```\n *\n * @param values - Map of attribute names and values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/attr/}\n */\nexport function attr<T extends AnyNode>(\n  this: Cheerio<T>,\n  values: Record<string, string | null>,\n): Cheerio<T>;\nexport function attr<T extends AnyNode>(\n  this: Cheerio<T>,\n  name?: string | Record<string, string | null>,\n  value?:\n    | string\n    | null\n    | ((this: Element, i: number, attrib: string) => string | null),\n): string | Cheerio<T> | undefined | Record<string, string> {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      if (typeof name !== 'string') {\n        {\n          throw new Error('Bad combination of arguments.');\n        }\n      }\n      return domEach(this, (el, i) => {\n        if (isTag(el)) setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n    return domEach(this, (el) => {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        for (const objName of Object.keys(name)) {\n          const objValue = name[objName];\n          setAttr(el, objName, objValue);\n        }\n      } else {\n        setAttr(el, name!, value!);\n      }\n    });\n  }\n\n  return arguments.length > 1\n    ? this\n    : getAttr(this[0], name!, this.options.xmlMode);\n}\n\n/**\n * Gets a node's prop.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the prop of.\n * @param name - Name of the prop.\n * @param xmlMode - Disable handling of special HTML attributes.\n * @returns The prop's value.\n */\nfunction getProp(\n  el: Element,\n  name: string,\n  xmlMode?: boolean,\n): string | undefined | boolean | Element[keyof Element] {\n  return name in el\n    ? // @ts-expect-error TS doesn't like us accessing the value directly here.\n      (el[name] as string | undefined)\n    : !xmlMode && rboolean.test(name)\n      ? getAttr(el, name, false) !== undefined\n      : getAttr(el, name, xmlMode);\n}\n\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param el - The element to set the prop on.\n * @param name - The prop's name.\n * @param value - The prop's value.\n * @param xmlMode - Disable handling of special HTML attributes.\n */\nfunction setProp(el: Element, name: string, value: unknown, xmlMode?: boolean) {\n  if (name in el) {\n    // @ts-expect-error Overriding value\n    el[name] = value;\n  } else {\n    setAttr(\n      el,\n      name,\n      !xmlMode && rboolean.test(name)\n        ? value\n          ? ''\n          : null\n        : `${value as string}`,\n    );\n  }\n}\n\ninterface StyleProp {\n  length: number;\n  [key: string]: string | number;\n  [index: number]: string;\n}\n\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('input[type=\"checkbox\"]').prop('checked');\n * //=> false\n *\n * $('input[type=\"checkbox\"]').prop('checked', true).val();\n * //=> ok\n * ```\n *\n * @param name - Name of the property.\n * @returns If `value` is specified the instance itself, otherwise the prop's\n *   value.\n * @see {@link https://api.jquery.com/prop/}\n */\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: 'tagName' | 'nodeName',\n): string | undefined;\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: 'innerHTML' | 'outerHTML' | 'innerText' | 'textContent',\n): string | null;\n/**\n * Get a parsed CSS style object.\n *\n * @param name - Name of the property.\n * @returns The style object, or `undefined` if the element has no `style`\n *   attribute.\n */\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: 'style',\n): StyleProp | undefined;\n/**\n * Resolve `href` or `src` of supported elements. Requires the `baseURI` option\n * to be set, and a global `URL` object to be part of the environment.\n *\n * @example With `baseURI` set to `'https://example.com'`:\n *\n * ```js\n * $('<img src=\"image.png\">').prop('src');\n * //=> 'https://example.com/image.png'\n * ```\n *\n * @param name - Name of the property.\n * @returns The resolved URL, or `undefined` if the element is not supported.\n */\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: 'href' | 'src',\n): string | undefined;\n/**\n * Get a property of an element.\n *\n * @param name - Name of the property.\n * @returns The property's value.\n */\nexport function prop<T extends AnyNode, K extends keyof Element>(\n  this: Cheerio<T>,\n  name: K,\n): Element[K];\n/**\n * Set a property of an element.\n *\n * @param name - Name of the property.\n * @param value - Value to set the property to.\n * @returns The instance itself.\n */\nexport function prop<T extends AnyNode, K extends keyof Element>(\n  this: Cheerio<T>,\n  name: K,\n  value:\n    | Element[K]\n    | ((this: Element, i: number, prop: K) => Element[keyof Element]),\n): Cheerio<T>;\n/**\n * Set multiple properties of an element.\n *\n * @example\n *\n * ```js\n * $('input[type=\"checkbox\"]').prop({\n *   checked: true,\n *   disabled: false,\n * });\n * ```\n *\n * @param map - Object of properties to set.\n * @returns The instance itself.\n */\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  map: Record<string, string | Element[keyof Element] | boolean>,\n): Cheerio<T>;\n/**\n * Set a property of an element.\n *\n * @param name - Name of the property.\n * @param value - Value to set the property to.\n * @returns The instance itself.\n */\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string,\n  value:\n    | string\n    | boolean\n    | null\n    | ((this: Element, i: number, prop: string) => string | boolean),\n): Cheerio<T>;\n/**\n * Get a property of an element.\n *\n * @param name - The property's name.\n * @returns The property's value.\n */\nexport function prop<T extends AnyNode>(this: Cheerio<T>, name: string): string;\nexport function prop<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string | Record<string, string | Element[keyof Element] | boolean>,\n  value?: unknown,\n):\n  | Cheerio<T>\n  | string\n  | boolean\n  | undefined\n  | null\n  | Element[keyof Element]\n  | StyleProp {\n  if (typeof name === 'string' && value === undefined) {\n    const el = this[0];\n\n    if (!el) return undefined;\n\n    switch (name) {\n      case 'style': {\n        const property = this.css() as StyleProp;\n        const keys = Object.keys(property);\n        for (let i = 0; i < keys.length; i++) {\n          property[i] = keys[i];\n        }\n\n        property.length = keys.length;\n\n        return property;\n      }\n      case 'tagName':\n      case 'nodeName': {\n        if (!isTag(el)) return undefined;\n        return el.name.toUpperCase();\n      }\n\n      case 'href':\n      case 'src': {\n        if (!isTag(el)) return undefined;\n        const prop = el.attribs?.[name];\n\n        if (\n          typeof URL !== 'undefined' &&\n          ((name === 'href' && (el.tagName === 'a' || el.tagName === 'link')) ||\n            (name === 'src' &&\n              (el.tagName === 'img' ||\n                el.tagName === 'iframe' ||\n                el.tagName === 'audio' ||\n                el.tagName === 'video' ||\n                el.tagName === 'source'))) &&\n          prop !== undefined &&\n          this.options.baseURI\n        ) {\n          return new URL(prop, this.options.baseURI).href;\n        }\n\n        return prop;\n      }\n\n      case 'innerText': {\n        return innerText(el);\n      }\n\n      case 'textContent': {\n        return textContent(el);\n      }\n\n      case 'outerHTML': {\n        if (el.type === ElementType.Root) return this.html();\n        return this.clone().wrap('<container />').parent().html();\n      }\n\n      case 'innerHTML': {\n        return this.html();\n      }\n\n      default: {\n        if (!isTag(el)) return undefined;\n        return getProp(el, name, this.options.xmlMode);\n      }\n    }\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      if (typeof name === 'object') {\n        throw new TypeError('Bad combination of arguments.');\n      }\n      return domEach(this, (el, i) => {\n        if (isTag(el)) {\n          setProp(\n            el,\n            name,\n            value.call(el, i, getProp(el, name, this.options.xmlMode)),\n            this.options.xmlMode,\n          );\n        }\n      });\n    }\n\n    return domEach(this, (el) => {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        for (const key of Object.keys(name)) {\n          const val = name[key];\n          setProp(el, key, val, this.options.xmlMode);\n        }\n      } else {\n        setProp(el, name, value, this.options.xmlMode);\n      }\n    });\n  }\n\n  return undefined;\n}\n\n/**\n * An element with a data attribute.\n *\n * @private\n */\ninterface DataElement extends Element {\n  /** The data attribute. */\n  data?: Record<string, unknown>;\n}\n\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param elem - The element to set the data attribute on.\n * @param name - The data attribute's name.\n * @param value - The data attribute's value.\n */\nfunction setData(\n  elem: DataElement,\n  name: string | Record<string, unknown>,\n  value?: unknown,\n) {\n  elem.data ??= {};\n\n  if (typeof name === 'object') Object.assign(elem.data, name);\n  else if (typeof name === 'string' && value !== undefined) {\n    elem.data[name] = value;\n  }\n}\n\n/**\n * Read _all_ HTML5 `data-*` attributes from the equivalent HTML5 `data-*`\n * attribute, and cache the value in the node's internal data store.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the data attribute of.\n * @returns A map with all of the data attributes.\n */\nfunction readAllData(el: DataElement): unknown {\n  for (const domName of Object.keys(el.attribs)) {\n    if (!domName.startsWith(dataAttrPrefix)) {\n      continue;\n    }\n\n    const jsName = camelCase(domName.slice(dataAttrPrefix.length));\n\n    if (!hasOwn(el.data, jsName)) {\n      el.data![jsName] = parseDataValue(el.attribs[domName]);\n    }\n  }\n\n  return el.data;\n}\n\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the data attribute of.\n * @param name - Name of the data attribute.\n * @returns The data attribute's value.\n */\nfunction readData(el: DataElement, name: string): unknown {\n  const domName = dataAttrPrefix + cssCase(name);\n  const data = el.data!;\n\n  if (hasOwn(data, name)) {\n    return data[name];\n  }\n\n  if (hasOwn(el.attribs, domName)) {\n    return (data[name] = parseDataValue(el.attribs[domName]));\n  }\n\n  return undefined;\n}\n\n/**\n * Coerce string data-* attributes to their corresponding JavaScript primitives.\n *\n * @private\n * @category Attributes\n * @param value - The value to parse.\n * @returns The parsed value.\n */\nfunction parseDataValue(value: string): unknown {\n  if (value === 'null') return null;\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  const num = Number(value);\n  if (value === String(num)) return num;\n  if (rbrace.test(value)) {\n    try {\n      return JSON.parse(value);\n    } catch {\n      /* Ignore */\n    }\n  }\n  return value;\n}\n\n/**\n * Method for getting data attributes, for only the first element in the matched\n * set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('<div data-apple-color=\"red\"></div>').data('apple-color');\n * //=> 'red'\n * ```\n *\n * @param name - Name of the data attribute.\n * @returns The data attribute's value, or `undefined` if the attribute does not\n *   exist.\n * @see {@link https://api.jquery.com/data/}\n */\nexport function data<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string,\n): unknown;\n/**\n * Method for getting all of an element's data attributes, for only the first\n * element in the matched set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('<div data-apple-color=\"red\"></div>').data();\n * //=> { appleColor: 'red' }\n * ```\n *\n * @returns A map with all of the data attributes.\n * @see {@link https://api.jquery.com/data/}\n */\nexport function data<T extends AnyNode>(\n  this: Cheerio<T>,\n): Record<string, unknown>;\n/**\n * Method for setting data attributes, for only the first element in the matched\n * set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * const apple = $('.apple').data('kind', 'mac');\n *\n * apple.data('kind');\n * //=> 'mac'\n * ```\n *\n * @param name - Name of the data attribute.\n * @param value - The new value.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/data/}\n */\nexport function data<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string,\n  value: unknown,\n): Cheerio<T>;\n/**\n * Method for setting multiple data attributes at once, for only the first\n * element in the matched set.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * const apple = $('.apple').data({ kind: 'mac' });\n *\n * apple.data('kind');\n * //=> 'mac'\n * ```\n *\n * @param values - Map of names to values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/data/}\n */\nexport function data<T extends AnyNode>(\n  this: Cheerio<T>,\n  values: Record<string, unknown>,\n): Cheerio<T>;\nexport function data<T extends AnyNode>(\n  this: Cheerio<T>,\n  name?: string | Record<string, unknown>,\n  value?: unknown,\n): unknown {\n  const elem = this[0];\n\n  if (!elem || !isTag(elem)) return;\n\n  const dataEl: DataElement = elem;\n  dataEl.data ??= {};\n\n  // Return the entire data object if no data specified\n  if (name == null) {\n    return readAllData(dataEl);\n  }\n\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, (el) => {\n      if (isTag(el)) {\n        if (typeof name === 'object') setData(el, name);\n        else setData(el, name, value);\n      }\n    });\n    return this;\n  }\n\n  return readData(dataEl, name);\n}\n\n/**\n * Method for getting the value of input, select, and textarea. Note: Support\n * for `map`, and `function` has not been added yet.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('input[type=\"text\"]').val();\n * //=> input_text\n * ```\n *\n * @returns The value.\n * @see {@link https://api.jquery.com/val/}\n */\nexport function val<T extends AnyNode>(\n  this: Cheerio<T>,\n): string | undefined | string[];\n/**\n * Method for setting the value of input, select, and textarea. Note: Support\n * for `map`, and `function` has not been added yet.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('input[type=\"text\"]').val('test').prop('outerHTML');\n * //=> <input type=\"text\" value=\"test\"/>\n * ```\n *\n * @param value - The new value.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/val/}\n */\nexport function val<T extends AnyNode>(\n  this: Cheerio<T>,\n  value: string | string[],\n): Cheerio<T>;\nexport function val<T extends AnyNode>(\n  this: Cheerio<T>,\n  value?: string | string[],\n): string | string[] | Cheerio<T> | undefined {\n  const querying = arguments.length === 0;\n  const element = this[0];\n\n  if (!element || !isTag(element)) return querying ? undefined : this;\n\n  switch (element.name) {\n    case 'textarea': {\n      return this.text(value as string);\n    }\n    case 'select': {\n      const option = this.find('option:selected');\n      if (!querying) {\n        if (this.attr('multiple') == null && typeof value === 'object') {\n          return this;\n        }\n\n        this.find('option').removeAttr('selected');\n\n        const values = typeof value === 'object' ? value : [value];\n        for (const val of values) {\n          this.find(`option[value=\"${val}\"]`).attr('selected', '');\n        }\n\n        return this;\n      }\n\n      return this.attr('multiple')\n        ? option.toArray().map((el) => text(el.children))\n        : option.attr('value');\n    }\n    case 'input':\n    case 'option': {\n      return querying\n        ? this.attr('value')\n        : this.attr('value', value as string);\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Remove an attribute.\n *\n * @private\n * @param elem - Node to remove attribute from.\n * @param name - Name of the attribute to remove.\n */\nfunction removeAttribute(elem: Element, name: string) {\n  if (!elem.attribs || !hasOwn(elem.attribs, name)) return;\n\n  delete elem.attribs[name];\n}\n\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @category Attributes\n * @param names - Names to split.\n * @returns - Split names.\n */\nfunction splitNames(names?: string): string[] {\n  return names ? names.trim().split(rspace) : [];\n}\n\n/**\n * Method for removing attributes by `name`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeAttr('class').prop('outerHTML');\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite');\n * $('.apple').removeAttr('id class').prop('outerHTML');\n * //=> <li>Apple</li>\n * ```\n *\n * @param name - Name of the attribute.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\nexport function removeAttr<T extends AnyNode>(\n  this: Cheerio<T>,\n  name: string,\n): Cheerio<T> {\n  const attrNames = splitNames(name);\n\n  for (const attrName of attrNames) {\n    domEach(this, (elem) => {\n      if (isTag(elem)) removeAttribute(elem, attrName);\n    });\n  }\n\n  return this;\n}\n\n/**\n * Check to see if _any_ of the matched elements have the given `className`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').hasClass('pear');\n * //=> true\n *\n * $('apple').hasClass('fruit');\n * //=> false\n *\n * $('li').hasClass('pear');\n * //=> true\n * ```\n *\n * @param className - Name of the class.\n * @returns Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\nexport function hasClass<T extends AnyNode>(\n  this: Cheerio<T>,\n  className: string,\n): boolean {\n  return this.toArray().some((elem) => {\n    const clazz = isTag(elem) && elem.attribs['class'];\n    let idx = -1;\n\n    if (clazz && className.length > 0) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        const end = idx + className.length;\n\n        if (\n          (idx === 0 || rspace.test(clazz[idx - 1])) &&\n          (end === clazz.length || rspace.test(clazz[end]))\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  });\n}\n\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').addClass('fruit').prop('outerHTML');\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').prop('outerHTML');\n * //=> <li class=\"apple fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of new class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\nexport function addClass<T extends AnyNode, R extends ArrayLike<T>>(\n  this: R,\n  value?:\n    | string\n    | ((this: Element, i: number, className: string) => string | undefined),\n): R {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        const className = el.attribs['class'] || '';\n        addClass.call([el], value.call(el, i, className));\n      }\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  const classNames = value.split(rspace);\n  const numElements = this.length;\n\n  for (let i = 0; i < numElements; i++) {\n    const el = this[i];\n    // If selected element isn't a tag, move on\n    if (!isTag(el)) continue;\n\n    // If we don't already have classes — always set xmlMode to false here, as it doesn't matter for classes\n    const className = getAttr(el, 'class', false);\n\n    if (className) {\n      let setClass = ` ${className} `;\n\n      // Check if class already exists\n      for (const cn of classNames) {\n        const appendClass = `${cn} `;\n        if (!setClass.includes(` ${appendClass}`)) setClass += appendClass;\n      }\n\n      setAttr(el, 'class', setClass.trim());\n    } else {\n      setAttr(el, 'class', classNames.join(' ').trim());\n    }\n  }\n\n  return this;\n}\n\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a\n * `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeClass('pear').prop('outerHTML');\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().prop('outerHTML');\n * //=> <li class=\"\">Apple</li>\n * ```\n *\n * @param name - Name of the class. If not specified, removes all elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\nexport function removeClass<T extends AnyNode, R extends ArrayLike<T>>(\n  this: R,\n  name?:\n    | string\n    | ((this: Element, i: number, className: string) => string | undefined),\n): R {\n  // Handle if value is a function\n  if (typeof name === 'function') {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        removeClass.call([el], name.call(el, i, el.attribs['class'] || ''));\n      }\n    });\n  }\n\n  const classes = splitNames(name);\n  const numClasses = classes.length;\n  const removeAll = arguments.length === 0;\n\n  return domEach(this, (el) => {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs['class'] = '';\n    } else {\n      const elClasses = splitNames(el.attribs['class']);\n      let changed = false;\n\n      for (let j = 0; j < numClasses; j++) {\n        const index = elClasses.indexOf(classes[j]);\n\n        if (index !== -1) {\n          elClasses.splice(index, 1);\n          changed = true;\n\n          /*\n           * We have to do another pass to ensure that there are not duplicate\n           * classes listed\n           */\n          j--;\n        }\n      }\n      if (changed) {\n        el.attribs['class'] = elClasses.join(' ');\n      }\n    }\n  });\n}\n\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple.green').toggleClass('fruit green red').prop('outerHTML');\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).prop('outerHTML');\n * //=> <li class=\"apple green fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of the class. Can also be a function.\n * @param stateVal - If specified the state of the class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\nexport function toggleClass<T extends AnyNode, R extends ArrayLike<T>>(\n  this: R,\n  value?:\n    | string\n    | ((\n        this: Element,\n        i: number,\n        className: string,\n        stateVal?: boolean,\n      ) => string),\n  stateVal?: boolean,\n): R {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        toggleClass.call(\n          [el],\n          value.call(el, i, el.attribs['class'] || '', stateVal),\n          stateVal,\n        );\n      }\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  const classNames = value.split(rspace);\n  const numClasses = classNames.length;\n  const state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;\n  const numElements = this.length;\n\n  for (let i = 0; i < numElements; i++) {\n    const el = this[i];\n    // If selected element isn't a tag, move on\n    if (!isTag(el)) continue;\n\n    const elementClasses = splitNames(el.attribs['class']);\n\n    // Check if class already exists\n    for (let j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      const index = elementClasses.indexOf(classNames[j]);\n\n      // Add if stateValue === true or we are toggling and there is no value\n      if (state >= 0 && index === -1) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index !== -1) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    el.attribs['class'] = elementClasses.join(' ');\n  }\n\n  return this;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}